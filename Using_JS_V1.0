<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Run Your ML Model</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 600px; margin: auto; }
        .form-group { margin-bottom: 15px; }
        .form-group label { display: block; }
        .form-group textarea, .form-group select, .form-group input { width: 100%; padding: 8px; }
        .form-group button { padding: 10px 20px; }
        .result { margin-top: 20px; padding: 10px; border: 1px solid #ccc; }
        .status { margin-top: 20px; padding: 10px; border: 1px solid #ccc; background-color: #f9f9f9; }
        .preview { margin-top: 20px; padding: 10px; border: 1px solid #ccc; }
        .progress { margin-top: 20px; }
    </style>
</head>
<body>

<div class="container">
    <h1>Run Your ML Model</h1>

    <div class="form-group">
        <label for="dataInput">Enter Data (Col1, Col2...)</label>
        <textarea id="dataInput" rows="4" placeholder="Enter data manually"></textarea>
    </div>

    <div class="form-group">
        <label for="fileInput">Or Upload CSV/Excel</label>
        <input type="file" id="fileInput">
    </div>

    <div class="form-group">
        <button onclick="previewData()">Preview Data</button>
    </div>

    <div class="form-group">
        <button onclick="uploadData()">Upload Data</button>
    </div>

    <div class="form-group">
        <label for="dependentVar">Select Dependent Variable</label>
        <select id="dependentVar"></select>
    </div>

    <div class="form-group">
        <label for="independentVars">Select Independent Variables</label>
        <select id="independentVars" multiple></select>
    </div>

    <div class="form-group">
        <label for="problemType">Select Problem Type</label>
        <select id="problemType">
            <option value="classification">Classification</option>
            <option value="regression">Regression</option>
        </select>
    </div>

    <div class="form-group">
        <label for="algorithm">Select Algorithm</label>
        <select id="algorithm">
            <option value="LinearRegression">Linear Regression</option>
            <option value="LogisticRegression">Logistic Regression</option>
            <option value="DecisionTree">Decision Tree</option>
            <option value="SVM">SVM</option>
            <option value="NaiveBayes">Naive Bayes</option>
            <option value="KNN">KNN</option>
            <option value="KMeans">K-Means</option>
            <option value="RandomForest">Random Forest</option>
            <option value="PCA">PCA</option>
            <option value="GradientBoosting">Gradient Boosting</option>
            <option value="AdaBoosting">AdaBoosting</option>
        </select>
    </div>

    <div class="form-group">
        <button onclick="runModel()">Run Model</button>
    </div>

    <div class="status" id="status"></div>
    <div class="preview" id="preview"></div>
    <div class="result" id="result"></div>
    <div class="progress" id="progress"><progress value="0" max="100"></progress></div>
</div>

<script>
    const defaultData = `Size,Bedrooms,Bathrooms,Price
1000,3,1,200000
1500,4,2,300000
2000,5,3,400000
2500,5,4,500000
3000,6,5,600000`;

    function previewData() {
        const dataInput = document.getElementById('dataInput').value;
        const fileInput = document.getElementById('fileInput').files[0];
        const previewDiv = document.getElementById('preview');

        if (dataInput) {
            displayPreview(dataInput);
        } else if (fileInput) {
            readFile(fileInput).then(content => {
                displayPreview(content);
            }).catch(error => {
                previewDiv.textContent = 'Error reading file.';
            });
        } else {
            previewDiv.textContent = 'No data provided. Using default dataset for property prediction.';
            displayPreview(defaultData);
        }
    }

    function displayPreview(content) {
        const rows = content.split('\n');
        const previewDiv = document.getElementById('preview');
        previewDiv.innerHTML = `<h2>Preview of Data (First 5 Rows)</h2>`;
        rows.slice(0, 5).forEach(row => {
            previewDiv.innerHTML += `<pre>${row}</pre>`;
        });
    }

    async function uploadData() {
        const statusDiv = document.getElementById('status');
        const progressBar = document.getElementById('progress').querySelector('progress');
        const dataInput = document.getElementById('dataInput').value;
        const fileInput = document.getElementById('fileInput').files[0];

        statusDiv.textContent = 'Uploading data... 0%';
        progressBar.value = 0;

        let content;
        if (dataInput) {
            content = dataInput;
        } else if (fileInput) {
            content = await readFile(fileInput, progressBar);
        } else {
            statusDiv.textContent = 'No data provided. Using default dataset for property prediction.';
            content = defaultData;
        }

        const response = await fetch('https://script.google.com/macros/s/AKfycbwHUF6qlGyynQi1_HhjRM1jB3zdQ-rL0deOI09Nz0wFeH7OFArxb3uZ9ErC09wDCymt/exec', {
            method: 'POST',
            body: JSON.stringify({ type: 'upload', content })
        });

        const data = await response.json();

        if (data.columns) {
            populateDropdowns(data.columns);
            displayPreview(data.preview.join('\n'));
            statusDiv.textContent = 'Data uploaded successfully';
            progressBar.value = 100;
            statusDiv.textContent += ' 100%';

            // Cross-check the uploaded data
            const sheetResponse = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${SHEET_NAME}?key=YOUR_API_KEY`);
            const sheetData = await sheetResponse.json();

            const sheetPreview = sheetData.values.slice(0, 6).map(row => row.join(',')).join('\n');
            if (content.trim() === sheetPreview.trim()) {
                statusDiv.textContent = 'Data uploaded and verified successfully.';
            } else {
                statusDiv.textContent = 'Data upload mismatch. Please check your data.';
            }
        } else {
            statusDiv.textContent = 'Error: Data upload failed.';
        }
    }

    function readFile(file, progressBar) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percentLoaded = Math.round((event.loaded / event.total) * 100);
                    progressBar.value = percentLoaded;
                    document.getElementById('status').textContent = `Uploading data... ${percentLoaded}%`;
                }
            };
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
            if (file.name.endsWith('.csv')) {
                reader.readAsText(file);
            } else if (file.name.endsWith('.xlsx')) {
                reader.readAsArrayBuffer(file);
            }
        });
    }

    function populateDropdowns(columns) {
        const dependentVar = document.getElementById('dependentVar');
        const independentVars = document.getElementById('independentVars');
        dependentVar.innerHTML = '';
        independentVars.innerHTML = '';

        columns.forEach(col => {
            const option = document.createElement('option');
            option.value = col;
            option.textContent = col;
            dependentVar.appendChild(option);

            const multiOption = option.cloneNode(true);
            independentVars.appendChild(multiOption);
        });
    }

    async function runModel() {
        const statusDiv = document.getElementById('status');
        const progressBar = document.getElementById('progress').querySelector('progress');
        const dependentVar = document.getElementById('dependentVar').value;
        const independentVars = Array.from(document.getElementById('independentVars').selectedOptions).map(opt => opt.value);
        const problemType = document.getElementById('problemType').value;
        const algorithm = document.getElementById('algorithm').value;

        statusDiv.textContent = `Now program flow is in function "async function runModel()" ... 0%`;
        progressBar.value = 0;

        const response = await fetch('https://script.google.com/macros/s/AKfycbwHUF6qlGyynQi1_HhjRM1jB3zdQ-rL0deOI09Nz0wFeH7OFArxb3uZ9ErC09wDCymt/exec', {
            method: 'POST',
            body: JSON.stringify({
                type: 'runModel',
                content: { dependentVar, independentVars, problemType, algorithm }
            })
        });

        progressBar.value = 50;
        statusDiv.textContent = `Now program flow is in function "async function runModel()" ... 50%`;

        const result = await response.json();

        if (result.accuracy !== undefined) {
            displayResult(result);
            statusDiv.textContent = 'Model run successfully';
            progressBar.value = 100;
            statusDiv.textContent += ' 100%';
        } else {
            statusDiv.textContent = 'Error: Model run failed.';
        }
    }

    function displayResult(result) {
        const resultDiv = document.getElementById('result');
        resultDiv.innerHTML = `
            <h2>Model Results</h2>
            <pre>${JSON.stringify(result, null, 2)}</pre>
        `;
    }
</script>

</body>
</html>
